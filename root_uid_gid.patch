diff --git a/bind-mount.c b/bind-mount.c
index 2757cae..9952704 100644
--- a/bind-mount.c
+++ b/bind-mount.c
@@ -447,7 +447,7 @@ bind_mount (int           proc_fd,
 
   assert (path_equal (mount_tab[0].mountpoint, kernel_case_combination));
   current_flags = mount_tab[0].options;
-  new_flags = current_flags | (devices ? 0 : MS_NODEV) | MS_NOSUID | (readonly ? MS_RDONLY : 0);
+  new_flags = current_flags | (devices ? 0 : MS_NODEV) | (readonly ? MS_RDONLY : 0);
   if (new_flags != current_flags &&
       mount ("none", resolved_dest,
              NULL, MS_SILENT | MS_BIND | MS_REMOUNT | new_flags, NULL) != 0)
@@ -467,7 +467,7 @@ bind_mount (int           proc_fd,
       for (i = 1; mount_tab[i].mountpoint != NULL; i++)
         {
           current_flags = mount_tab[i].options;
-          new_flags = current_flags | (devices ? 0 : MS_NODEV) | MS_NOSUID | (readonly ? MS_RDONLY : 0);
+          new_flags = current_flags | (devices ? 0 : MS_NODEV) | (readonly ? MS_RDONLY : 0);
           if (new_flags != current_flags &&
               mount ("none", mount_tab[i].mountpoint,
                      NULL, MS_SILENT | MS_BIND | MS_REMOUNT | new_flags, NULL) != 0)
diff --git a/bubblewrap.c b/bubblewrap.c
index 9b78a9a..497274c 100644
--- a/bubblewrap.c
+++ b/bubblewrap.c
@@ -326,8 +326,8 @@ usage (int ecode, FILE *out)
            "    --disable-userns             Disable further use of user namespaces inside sandbox\n"
            "    --assert-userns-disabled     Fail unless further use of user namespace inside sandbox is disabled\n"
            "    --pidns FD                   Use this pid namespace (as parent namespace if using --unshare-pid)\n"
-           "    --uid UID                    Custom uid in the sandbox (requires --unshare-user or --userns)\n"
-           "    --gid GID                    Custom gid in the sandbox (requires --unshare-user or --userns)\n"
+           "    --uid UID                    Custom uid in the sandbox (requires root, --unshare-user or --userns)\n"
+           "    --gid GID                    Custom gid in the sandbox (requires root, --unshare-user or --userns)\n"
            "    --hostname NAME              Custom hostname in the sandbox (requires --unshare-uts)\n"
            "    --chdir DIR                  Change directory to DIR\n"
            "    --clearenv                   Unset all environment variables\n"
@@ -2682,7 +2682,7 @@ main (int    argc,
   acquire_privs ();
 
   /* Never gain any more privs during exec */
-  if (prctl (PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0)
+  if (real_uid != 0 && prctl (PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0)
     die_with_error ("prctl(PR_SET_NO_NEW_PRIVS) failed");
 
   /* The initial code is run with high permissions
@@ -2798,11 +2798,11 @@ main (int    argc,
   if (opt_sandbox_gid == (gid_t)-1)
     opt_sandbox_gid = real_gid;
 
-  if (!opt_unshare_user && opt_userns_fd == -1 && opt_sandbox_uid != real_uid)
-    die ("Specifying --uid requires --unshare-user or --userns");
+  if (real_uid != 0 && !opt_unshare_user && opt_userns_fd == -1 && opt_sandbox_uid != real_uid)
+    die ("Specifying --uid requires root, --unshare-user or --userns");
 
-  if (!opt_unshare_user && opt_userns_fd == -1 && opt_sandbox_gid != real_gid)
-    die ("Specifying --gid requires --unshare-user or --userns");
+  if (real_uid != 0 && !opt_unshare_user && opt_userns_fd == -1 && opt_sandbox_gid != real_gid)
+    die ("Specifying --gid requires root, --unshare-user or --userns");
 
   if (!opt_unshare_uts && opt_sandbox_hostname != NULL)
     die ("Specifying --hostname requires --unshare-uts");
@@ -3255,6 +3255,18 @@ main (int    argc,
         die ("creation of new user namespaces was not disabled as requested");
     }
 
+  if (real_uid == 0 && !opt_unshare_user && opt_userns_fd == -1 && (opt_sandbox_uid != real_uid || opt_sandbox_gid != real_gid)) {
+    /* Tell kernel not clear capabilities when later dropping root uid */
+    if (prctl (PR_SET_KEEPCAPS, 1, 0, 0, 0) < 0)
+      die_with_error ("prctl(PR_SET_KEEPCAPS) failed");
+
+    if (opt_sandbox_gid != real_gid && setgid (opt_sandbox_gid) < 0)
+      die_with_error ("unable to switch to gid %d", opt_sandbox_gid);
+
+    if (opt_sandbox_uid != real_uid && setuid (opt_sandbox_uid) < 0)
+      die_with_error ("unable to switch to uid %d", opt_sandbox_uid);
+  }
+
   /* All privileged ops are done now, so drop caps we don't need */
   drop_privs (!is_privileged, TRUE);
 
